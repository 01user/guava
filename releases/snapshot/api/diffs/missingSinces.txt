OK: com.google.common.collect.Comparators Class
OK: com.google.common.util.concurrent.ForwardingBlockingDeque Class
OK: com.google.common.io.InsecureRecursiveDeleteException Class
OK: com.google.common.collect.Interners.InternerBuilder Class
OK: com.google.common.collect.MoreCollectors Class
OK: com.google.common.io.MoreFiles Class
OK: com.google.common.io.RecursiveDeleteOption Class
OK: com.google.common.collect.Streams Class
OK: com.google.common.collect.Streams.DoubleFunctionWithIndex Interface
OK: com.google.common.collect.Streams.FunctionWithIndex Interface
OK: com.google.common.collect.Streams.IntFunctionWithIndex Interface
OK: com.google.common.collect.Streams.LongFunctionWithIndex Interface
OK: com.google.common.util.concurrent.AtomicLongMap Method accumulateAndGet(K, long, java.util.function.LongBinaryOperator)
MISSING @SINCE TAG: com.google.common.collect.Sets.SetView Method add(E)
MISSING @SINCE TAG: com.google.common.collect.ImmutableRangeSet Method addAll(java.lang.Iterable<com.google.common.collect.Range<C>>)
OK: com.google.common.collect.ImmutableRangeSet.Builder Method addAll(java.lang.Iterable<com.google.common.collect.Range<C>>)
OK: com.google.common.collect.RangeSet Method addAll(java.lang.Iterable<com.google.common.collect.Range<C>>)
MISSING @SINCE TAG: com.google.common.collect.Sets.SetView Method addAll(java.util.Collection<? extends E>)
OK: com.google.common.primitives.UnsignedInts Method checkedCast(long)
MISSING @SINCE TAG: com.google.common.collect.Sets.SetView Method clear()
MISSING @SINCE TAG: com.google.common.collect.ImmutableMap Method compute(K, java.util.function.BiFunction<? super K, ? super V, ? extends V>)
MISSING @SINCE TAG: com.google.common.collect.ImmutableMap Method computeIfAbsent(K, java.util.function.Function<? super K, ? extends V>)
MISSING @SINCE TAG: com.google.common.collect.ImmutableMap Method computeIfPresent(K, java.util.function.BiFunction<? super K, ? super V, ? extends V>)
OK: com.google.common.primitives.Chars Method constrainToRange(char, char, char)
OK: com.google.common.primitives.Doubles Method constrainToRange(double, double, double)
OK: com.google.common.primitives.Floats Method constrainToRange(float, float, float)
OK: com.google.common.primitives.Ints Method constrainToRange(int, int, int)
OK: com.google.common.primitives.Longs Method constrainToRange(long, long, long)
OK: com.google.common.primitives.Shorts Method constrainToRange(short, short, short)
OK: com.google.common.collect.ImmutableRangeSet Method copyOf(java.lang.Iterable<com.google.common.collect.Range<C>>)
OK: com.google.common.collect.TreeRangeSet Method create(java.lang.Iterable<com.google.common.collect.Range<C>>)
NO DOC BLOCK: com.google.common.collect.MutableClassToInstanceMap Method delegate()
OK: com.google.common.collect.ImmutableRangeSet Method difference(com.google.common.collect.RangeSet<C>)
OK: com.google.common.collect.ImmutableMultiset Method elementSet()
OK: com.google.common.collect.RangeSet Method enclosesAll(java.lang.Iterable<com.google.common.collect.Range<C>>)
NO DOC BLOCK: com.google.common.collect.MutableClassToInstanceMap Method entrySet()
OK: com.google.common.primitives.Booleans Method falseFirst()
OK: com.google.common.collect.ImmutableListMultimap Method flatteningToImmutableListMultimap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends V>>)
OK: com.google.common.collect.ImmutableSetMultimap Method flatteningToImmutableSetMultimap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends V>>)
OK: com.google.common.collect.Multimaps Method flatteningToMultimap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends V>>, java.util.function.Supplier<M>)
NO DOC BLOCK: com.google.common.collect.HashBiMap Method forEach(java.util.function.BiConsumer<? super K, ? super V>)
NO DOC BLOCK: com.google.common.collect.ImmutableList Method forEach(java.util.function.Consumer<? super E>)
NO DOC BLOCK: com.google.common.collect.ImmutableMultimap Method forEach(java.util.function.BiConsumer<? super K, ? super V>)
NO DOC BLOCK: com.google.common.collect.ImmutableSortedMap Method forEach(java.util.function.BiConsumer<? super K, ? super V>)
OK: com.google.common.collect.Multimap Method forEach(java.util.function.BiConsumer<? super K, ? super V>)
MISSING @SINCE TAG: com.google.common.collect.Multiset Method forEach(java.util.function.Consumer<? super E>)
OK: com.google.common.collect.Multiset Method forEachEntry(java.util.function.ObjIntConsumer<? super E>)
OK: com.google.common.base.Optional Method fromJavaUtil(java.util.Optional<T>)
OK: com.google.common.util.concurrent.AtomicLongMap Method getAndAccumulate(K, long, java.util.function.LongBinaryOperator)
OK: com.google.common.util.concurrent.AtomicLongMap Method getAndUpdate(K, java.util.function.LongUnaryOperator)
OK: com.google.common.base.Throwables Method getCauseAs(java.lang.Throwable, java.lang.Class<X>)
NO DOC BLOCK: com.google.common.collect.ImmutableMap Method getOrDefault(java.lang.Object, V)
OK: com.google.common.collect.ImmutableRangeSet Method intersection(com.google.common.collect.RangeSet<C>)
MISSING @SINCE TAG: com.google.common.collect.ImmutableMap Method merge(K, V, java.util.function.BiFunction<? super V, ? super V, ? extends V>)
MISSING @SINCE TAG: com.google.common.collect.Interners Method newBuilder()
MISSING @SINCE TAG: com.google.common.util.concurrent.Monitor Method newGuard(java.util.function.BooleanSupplier)
NO DOC BLOCK: com.google.common.collect.MutableClassToInstanceMap Method put(java.lang.Class<? extends B>, B)
NO DOC BLOCK: com.google.common.collect.MutableClassToInstanceMap Method putAll(java.util.Map<? extends java.lang.Class<? extends B>, ? extends B>)
MISSING @SINCE TAG: com.google.common.collect.ImmutableMap Method putIfAbsent(K, V)
MISSING @SINCE TAG: com.google.common.collect.ImmutableMap Method remove(java.lang.Object, java.lang.Object)
MISSING @SINCE TAG: com.google.common.collect.Sets.SetView Method remove(java.lang.Object)
MISSING @SINCE TAG: com.google.common.collect.ImmutableRangeSet Method removeAll(java.lang.Iterable<com.google.common.collect.Range<C>>)
OK: com.google.common.collect.RangeSet Method removeAll(java.lang.Iterable<com.google.common.collect.Range<C>>)
MISSING @SINCE TAG: com.google.common.collect.Sets.SetView Method removeAll(java.util.Collection<?>)
MISSING @SINCE TAG: com.google.common.collect.ImmutableCollection Method removeIf(java.util.function.Predicate<? super E>)
MISSING @SINCE TAG: com.google.common.collect.Sets.SetView Method removeIf(java.util.function.Predicate<? super E>)
MISSING @SINCE TAG: com.google.common.collect.ImmutableMap Method replace(K, V)
MISSING @SINCE TAG: com.google.common.collect.ImmutableMap Method replace(K, V, V)
NO DOC BLOCK: com.google.common.collect.ForwardingNavigableMap.StandardDescendingMap Method replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)
NO DOC BLOCK: com.google.common.collect.HashBiMap Method replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)
MISSING @SINCE TAG: com.google.common.collect.ImmutableList Method replaceAll(java.util.function.UnaryOperator<E>)
MISSING @SINCE TAG: com.google.common.collect.ImmutableMap Method replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)
MISSING @SINCE TAG: com.google.common.collect.Sets.SetView Method retainAll(java.util.Collection<?>)
OK: com.google.common.primitives.UnsignedInts Method saturatedCast(long)
MISSING @SINCE TAG: com.google.common.collect.Multiset Method size()
MISSING @SINCE TAG: com.google.common.collect.ImmutableList Method sort(java.util.Comparator<? super E>)
OK: com.google.common.collect.ImmutableList Method sortedCopyOf(java.lang.Iterable<? extends E>)
OK: com.google.common.collect.ImmutableList Method sortedCopyOf(java.util.Comparator<? super E>, java.lang.Iterable<? extends E>)
NO DOC BLOCK: com.google.common.collect.ImmutableCollection Method spliterator()
NO DOC BLOCK: com.google.common.collect.ImmutableList Method spliterator()
NO DOC BLOCK: com.google.common.collect.ImmutableSortedSet Method spliterator()
NO DOC BLOCK: com.google.common.collect.Multiset Method spliterator()
OK: com.google.common.collect.FluentIterable Method stream()
OK: com.google.common.base.Equivalence Method test(T, T)
NO DOC BLOCK: com.google.common.base.Predicate Method test(T)
OK: com.google.common.collect.ImmutableBiMap Method toImmutableBiMap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>)
OK: com.google.common.collect.Maps Method toImmutableEnumMap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>)
OK: com.google.common.collect.Maps Method toImmutableEnumMap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>, java.util.function.BinaryOperator<V>)
OK: com.google.common.collect.Sets Method toImmutableEnumSet()
OK: com.google.common.collect.ImmutableList Method toImmutableList()
OK: com.google.common.collect.ImmutableListMultimap Method toImmutableListMultimap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>)
OK: com.google.common.collect.ImmutableMap Method toImmutableMap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>)
OK: com.google.common.collect.ImmutableMap Method toImmutableMap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>, java.util.function.BinaryOperator<V>)
OK: com.google.common.collect.ImmutableMultiset Method toImmutableMultiset()
OK: com.google.common.collect.ImmutableSet Method toImmutableSet()
OK: com.google.common.collect.ImmutableSetMultimap Method toImmutableSetMultimap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>)
OK: com.google.common.collect.ImmutableSortedMap Method toImmutableSortedMap(java.util.Comparator<? super K>, java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>)
OK: com.google.common.collect.ImmutableSortedMap Method toImmutableSortedMap(java.util.Comparator<? super K>, java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>, java.util.function.BinaryOperator<V>)
OK: com.google.common.collect.ImmutableSortedMultiset Method toImmutableSortedMultiset(java.util.Comparator<? super E>)
OK: com.google.common.collect.ImmutableSortedSet Method toImmutableSortedSet(java.util.Comparator<? super E>)
OK: com.google.common.collect.ImmutableTable Method toImmutableTable(java.util.function.Function<? super T, ? extends R>, java.util.function.Function<? super T, ? extends C>, java.util.function.Function<? super T, ? extends V>)
OK: com.google.common.collect.ImmutableTable Method toImmutableTable(java.util.function.Function<? super T, ? extends R>, java.util.function.Function<? super T, ? extends C>, java.util.function.Function<? super T, ? extends V>, java.util.function.BinaryOperator<V>)
OK: com.google.common.base.Optional Method toJavaUtil()
OK: com.google.common.base.Optional Method toJavaUtil(com.google.common.base.Optional<T>)
OK: com.google.common.collect.Multimaps Method toMultimap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>, java.util.function.Supplier<M>)
OK: com.google.common.collect.Tables Method toTable(java.util.function.Function<? super T, ? extends R>, java.util.function.Function<? super T, ? extends C>, java.util.function.Function<? super T, ? extends V>, java.util.function.BinaryOperator<V>, java.util.function.Supplier<I>)
OK: com.google.common.collect.Tables Method toTable(java.util.function.Function<? super T, ? extends R>, java.util.function.Function<? super T, ? extends C>, java.util.function.Function<? super T, ? extends V>, java.util.function.Supplier<I>)
OK: com.google.common.primitives.Booleans Method trueFirst()
OK: com.google.common.collect.ImmutableRangeSet Method union(com.google.common.collect.RangeSet<C>)
OK: com.google.common.collect.ImmutableRangeSet Method unionOf(java.lang.Iterable<com.google.common.collect.Range<C>>)
OK: com.google.common.util.concurrent.AtomicLongMap Method updateAndGet(K, java.util.function.LongUnaryOperator)
